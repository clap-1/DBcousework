# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Stu_AppWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import StuAddApplication
from PyQt5.QtCore import Qt, QObject, pyqtSignal
from functools import partial
import application
import datetime
import numpy

class Ui_Form(object):

    # 初始化
    def __init__(self, name, id):
        self.name = name
        self.id = id

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(3000, 1000)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.app_btn = QtWidgets.QPushButton(Form)
        self.app_btn.setObjectName("app_btn")
        self.horizontalLayout.addWidget(self.app_btn)
        self.filter_combox = QtWidgets.QComboBox(Form)
        self.filter_combox.setObjectName("filter_combox")
        self.filter_combox.addItem("")
        self.filter_combox.addItem("")
        self.filter_combox.addItem("")
        self.filter_combox.addItem("")
        self.filter_combox.addItem("")
        self.horizontalLayout.addWidget(self.filter_combox)
        self.sort_combox = QtWidgets.QComboBox(Form)
        self.sort_combox.setObjectName("sort_combox")
        self.sort_combox.addItem("")
        self.sort_combox.addItem("")
        self.sort_combox.addItem("")
        self.horizontalLayout.addWidget(self.sort_combox)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.app_table = QtWidgets.QTableWidget(Form)
        self.app_table.setObjectName("app_table")
        # 申请表有10列
        self.app_table.setColumnCount(10)
        self.app_table.setRowCount(0)
        # 设置标题属性
        self.app_table.setHorizontalHeaderLabels(['申请序号', '申请时间', '离校时间', '返校时间', '外出理由', '处理状态', '评论',
                                                  '审批教师', '修改','取消'])
        #表格伸缩模式
        self.app_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.verticalLayout.addWidget(self.app_table)
        #不可编辑
        self.app_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # 信号与槽函数连接
        self.app_btn.clicked.connect(self.AddApplication)
        # combox信号与槽
        self.sort_combox.currentIndexChanged.connect(self.sortAndFilter)
        self.filter_combox.currentIndexChanged.connect(self.sortAndFilter)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", '学生' + self.name + '+' + self.id))
        self.app_btn.setText(_translate("Form", "离校申请"))
        self.filter_combox.setItemText(0, _translate("Form", "全部显示"))
        self.filter_combox.setItemText(1, _translate("Form", "筛选出已通过申请"))
        self.filter_combox.setItemText(2, _translate("Form", "筛选出已被拒绝申请"))
        self.filter_combox.setItemText(3, _translate("Form", "筛选出已取消申请"))
        self.filter_combox.setItemText(4, _translate("Form", "筛选出正在审批的申请"))
        self.sort_combox.setItemText(0, _translate("Form", "默认方式排序"))
        self.sort_combox.setItemText(1, _translate("Form", "按离校时间排序"))
        self.sort_combox.setItemText(2, _translate("Form", "按申请时间排序"))
        self.ShowApplication()

    # 添加申请
    def AddApplication(self):
        self.formAddApp = QWidget()
        self.uiAddApp = StuAddApplication.Ui_Form((int(self.id) * 10 + int(self.app_table.rowCount())), self.id, 'Add')
        self.uiAddApp.setupUi(self.formAddApp)
        self.uiAddApp.App_info_signal.connect(self.AddToTable)
        self.formAddApp.show()

    # 修改申请
    def revise(self, app_id):
        self.formReviseApp = QWidget()
        self.uiReviseApp = StuAddApplication.Ui_Form(app_id, self.id, 'Revise')
        self.uiReviseApp.setupUi(self.formReviseApp)
        self.uiReviseApp.App_revise_signal.connect(self.ReviseTable)
        self.formReviseApp.show()

    #修改界面
    def ReviseTable(self, list):
        currentRow = self.app_table.rowCount()
        i = 0
        for i in range(i, currentRow):
            if (str(list[0]) == self.app_table.item(i, 0).text()):
                break
        new_applytime = QTableWidgetItem(list[1])
        new_leavetime = QTableWidgetItem(list[2])
        new_returntime = QTableWidgetItem(list[3])
        new_reason = QTableWidgetItem(list[4])
        new_state = QTableWidgetItem('Pending')
        new_state.setTextAlignment(Qt.AlignCenter)
        new_comment = QTableWidgetItem('无')
        self.app_table.setItem(i, 1, new_applytime)
        self.app_table.setItem(i, 2, new_leavetime)
        self.app_table.setItem(i, 3, new_returntime)
        self.app_table.setItem(i, 4, new_reason)
        self.app_table.setItem(i ,5, new_state)
        self.app_table.setItem(i, 6, new_comment)
        self.revise_list[i + 1].setEnabled(False)
        self.cancel_list[i + 1].setEnabled(True)

    #取消申请，将取消按钮置灰且将状态改为cancelled
    def cancel(self, app_id, state, rowcount):
        new_state_item = QTableWidgetItem('Cancelled')
        new_state_item.setTextAlignment(Qt.AlignCenter)
        self.app_table.setItem(rowcount, 5, new_state_item)
        self.cancel_list[rowcount + 1].setEnabled(False)
        appli = application.Manage_Application()
        appli.SetCancel(int(app_id))


    def AddToTable(self, list):
        current_rowcount = self.app_table.rowCount()
        count_column = 1
        #生成申请序号
        self.app_table.setRowCount(current_rowcount + 1)
        #将序号变化str类型
        app_id = str(int(self.id) * 10 + current_rowcount)
        #将序号添加进表格
        new_id_item = QTableWidgetItem(app_id)
        new_id_item.setTextAlignment(Qt.AlignCenter)
        self.app_table.setItem(current_rowcount, 0, new_id_item)
        #添加申请时间，离校时间，返校时间，出校原因
        for count_column in range(1,5):
            new_item = QTableWidgetItem(list[count_column - 1])
            self.app_table.setItem(current_rowcount, count_column, new_item)
        #默认申请状态为pending
        new_item = QTableWidgetItem('Pending')
        new_item.setTextAlignment(Qt.AlignCenter)
        self.app_table.setItem(current_rowcount, count_column + 1, new_item)
        #默认无评论
        new_comment = QTableWidgetItem('无')
        self.app_table.setItem(current_rowcount, count_column + 2, new_comment)
        #生成审批教师
        new_teacher = QTableWidgetItem(list[count_column])
        new_teacher.setTextAlignment(Qt.AlignCenter)
        self.app_table.setItem(current_rowcount, count_column + 3, new_teacher)
        #生成修改键
        new_revise_btn = QtWidgets.QPushButton('修改')
        #”修改“信号与槽连接
        self.revise_list.append(new_revise_btn)
        len_revise = len(self.revise_list)
        self.revise_list[len_revise - 1].clicked.connect(partial(self.revise, app_id))
        self.app_table.setCellWidget(current_rowcount, count_column + 4, new_revise_btn)
        #获取当前状态，如果为passed和refused就可以修改
        state = self.app_table.item(current_rowcount, count_column + 1).text()
        if((state == 'Passed') | (state == 'Refused')):
            new_revise_btn.setEnabled(True)
        else:
            new_revise_btn.setEnabled(False)
        #生成取消键
        new_cancel_btn = QtWidgets.QPushButton('取消')
        #”取消“信号与槽连接
        self.cancel_list.append(new_cancel_btn)
        len_cancel = len(self.cancel_list)
        self.cancel_list[len_cancel - 1].clicked.connect(partial(self.cancel, app_id, 'Pending', len_cancel - 2))
        self.app_table.setCellWidget(current_rowcount, count_column + 5, new_cancel_btn)
        #如果是passed，cancelled，refused都不可以再次cancel
        if(state == 'Pending'):
            new_cancel_btn.setEnabled(True)
        else:
            new_cancel_btn.setEnabled(False)

    # #显示出该同学的申请
    def ShowApplication(self):
        appl = application.Manage_Application()
        Records = appl.ReturnStuRecord(int(self.id))
        i = 0
        j = 0
        len_Records = len(Records)
        # 创建“修改键”和“取消键”列表
        self.revise_list = list[1]
        self.revise_list = [0]
        self.cancel_list = list[1]
        self.cancel_list = [0]
        self.app_table.setRowCount(len_Records)
        for i in range(0, len_Records):
            for j in range(0, 8):
                if (j == 0):
                    #需要将申请序号转化为string类型并居中
                    new_id_item = QTableWidgetItem(str(Records[i][j]))
                    self.app_table.setItem(i, j, new_id_item)
                    new_id_item.setTextAlignment(Qt.AlignCenter)
                    #将处理状态居中，且去掉结尾的空格
                elif (j == 5):
                    new_item = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_item)
                    new_item.setTextAlignment(Qt.AlignCenter)
                elif (j == 7):
                    new_teacher = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_teacher)
                    new_teacher.setTextAlignment(Qt.AlignCenter)
                else:
                    new_item = QTableWidgetItem(Records[i][j])
                    self.app_table.setItem(i, j, new_item)
        i = 0
        j = 8
        # 生成修改键
        for i in range(0, len_Records):
            new_revise_btn = QtWidgets.QPushButton('修改')
            self.revise_list.append(new_revise_btn)
            len_revise = len(self.revise_list)
            self.revise_list[len_revise - 1].clicked.connect(partial(self.revise, int(Records[i][0])))
            self.app_table.setCellWidget(i, j, new_revise_btn)
            #获取当前状态，如果为passed和refused就可以修改
            state = self.app_table.item(i, 5).text()
            if((state == 'Passed') | (state == 'Refused')):
                new_revise_btn.setEnabled(True)
            else:
                new_revise_btn.setEnabled(False)
            #生成取消键
            new_cancel_btn = QtWidgets.QPushButton('取消')
            self.cancel_list.append(new_cancel_btn)
            self.cancel_list[i + 1].clicked.connect(partial(self.cancel, Records[i][0], state, i))
            self.app_table.setCellWidget(i, j + 1, new_cancel_btn)
            #如果是passed，cancelled，refused都不可以再次cancel
            if(state == 'Pending'):
                new_cancel_btn.setEnabled(True)
            else:
                new_cancel_btn.setEnabled(False)

    #排序并重新显示新的table
    def sortAndFilter(self):
        sorttype = self.sort_combox.currentText()
        filtertype = self.filter_combox.currentText()
        self.app_table.setRowCount(0)
        self.app_table.clearContents()
        appl = application.Manage_Application()
        Records = appl.ReturnSortAndFilter(sorttype,filtertype, int(self.id))
        i = 0
        j = 0
        len_Records = len(Records)
        # 创建“修改键”和“取消键”列表
        self.revise_list = list[1]
        self.revise_list = [0]
        self.cancel_list = list[1]
        self.cancel_list = [0]
        self.app_table.setRowCount(len_Records)
        for i in range(0, len_Records):
            for j in range(0, 8):
                if (j == 0):
                    # 需要将申请序号转化为string类型并居中
                    new_id_item = QTableWidgetItem(str(Records[i][j]))
                    self.app_table.setItem(i, j, new_id_item)
                    new_id_item.setTextAlignment(Qt.AlignCenter)
                elif (j == 5):
                    new_item = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_item)
                    new_item.setTextAlignment(Qt.AlignCenter)
                elif (j == 7):
                    new_teacher = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_teacher)
                    new_teacher.setTextAlignment(Qt.AlignCenter)
                else:
                    new_item = QTableWidgetItem(Records[i][j])
                    self.app_table.setItem(i, j, new_item)
        i = 0
        j = 8
        # 生成修改键
        for i in range(0, len_Records):
            new_revise_btn = QtWidgets.QPushButton('修改')
            new_revise_btn.clicked.connect(partial(self.revise, Records[i][0]))
            self.revise_list.append(new_revise_btn)
            self.app_table.setCellWidget(i, j, new_revise_btn)
            # 获取当前状态，如果为passed和refused就可以修改
            state = self.app_table.item(i, 5).text()
            if ((state == 'Passed') | (state == 'Refused')):
                new_revise_btn.setEnabled(True)
            else:
                new_revise_btn.setEnabled(False)
            # 生成取消键
            new_cancel_btn = QtWidgets.QPushButton('取消')
            self.cancel_list.append(new_cancel_btn)
            self.cancel_list[i + 1].clicked.connect(partial(self.cancel, Records[i][0], state, i))
            self.app_table.setCellWidget(i, j + 1, new_cancel_btn)
            # 如果是passed，cancelled，refused都不可以再次cancel
            if (state == 'Pending'):
                new_cancel_btn.setEnabled(True)
            else:
                new_cancel_btn.setEnabled(False)




