# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TeacWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import Qt, QObject, pyqtSignal
from functools import partial
import application
import datetime
import numpy
import comment

class Ui_Teac(object):
    # 初始化
    def __init__(self, name, id):
        self.name = name
        self.id = id

    def setupUi(self, Teac):
        Teac.setObjectName("Teac")
        Teac.resize(3000, 1000)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Teac)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.leave_label = QtWidgets.QLabel(Teac)
        self.leave_label.setStyleSheet("font: 14pt \"方正粗黑宋简体\";")
        self.leave_label.setObjectName("leave_label")
        self.horizontalLayout.addWidget(self.leave_label)
        self.filtercombox = QtWidgets.QComboBox(Teac)
        self.filtercombox.setObjectName("filtercombox")
        self.filtercombox.addItem("")
        self.filtercombox.addItem("")
        self.filtercombox.addItem("")
        self.filtercombox.addItem("")
        self.filtercombox.addItem("")
        self.horizontalLayout.addWidget(self.filtercombox)
        self.comboBox = QtWidgets.QComboBox(Teac)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout.addWidget(self.comboBox)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.app_table = QtWidgets.QTableWidget(Teac)
        self.app_table.setObjectName("app_table")
        self.app_table.setColumnCount(0)
        self.app_table.setRowCount(0)
        self.verticalLayout.addWidget(self.app_table)
        self.verticalLayout_2.addLayout(self.verticalLayout)

        # 申请表有10列
        self.app_table.setColumnCount(10)
        self.app_table.setRowCount(0)
        # 设置标题属性
        self.app_table.setHorizontalHeaderLabels(['申请序号', '申请人', '申请时间', '离校时间', '返校时间', '外出理由', '处理状态', '评论',
                                                  '同意', '拒绝'])
        # 表格伸缩模式
        self.app_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.verticalLayout.addWidget(self.app_table)
        # 不可编辑
        self.app_table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.comboBox.currentIndexChanged.connect(self.sortAndFilter)
        self.filtercombox.currentIndexChanged.connect(self.sortAndFilter)
        self.retranslateUi(Teac)
        QtCore.QMetaObject.connectSlotsByName(Teac)
        self.ShowAllApplication()

    def retranslateUi(self, Teac):
        _translate = QtCore.QCoreApplication.translate
        Teac.setWindowTitle(_translate("Teac", '教师' + self.name + '+' + self.id))
        self.leave_label.setText(_translate("Teac", "本系学生离校申请"))
        self.filtercombox.setItemText(0, _translate("Teac", "全部显示"))
        self.filtercombox.setItemText(1, _translate("Teac", "筛选出已通过申请"))
        self.filtercombox.setItemText(2, _translate("Teac", "筛选出已拒绝申请"))
        self.filtercombox.setItemText(3, _translate("Teac", "筛选出已取消申请"))
        self.filtercombox.setItemText(4, _translate("Teac", "筛选出正在审批的申请"))
        self.comboBox.setItemText(0, _translate("Teac", "默认方式排序"))
        self.comboBox.setItemText(1, _translate("Teac", "按离校时间排序"))
        self.comboBox.setItemText(2, _translate("Teac", "按申请时间排序"))

    def ShowAllApplication(self):
        appl = application.Manage_Application()
        Records = appl.GetAllStuApp(int(self.id))
        i = 0
        j = 0
        len_Records = len(Records)
        # 创建“修改键”和“取消键”列表
        self.agree_list = list[1]
        self.agree_list = [0]
        self.refuse_list = list[1]
        self.refuse_list = [0]
        self.app_table.setRowCount(len_Records)
        for i in range(0, len_Records):
            for j in range(0, 8):
                if (j == 0):
                    # 需要将申请序号转化为string类型并居中
                    new_id_item = QTableWidgetItem(str(Records[i][j]))
                    self.app_table.setItem(i, j, new_id_item)
                    new_id_item.setTextAlignment(Qt.AlignCenter)
                    # 将处理状态居中，且去掉结尾的空格
                elif (j == 6):
                    new_item = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_item)
                    new_item.setTextAlignment(Qt.AlignCenter)
                else:
                    new_item = QTableWidgetItem(Records[i][j])
                    self.app_table.setItem(i, j, new_item)
        i = 0
        j = 8
        # 生成同意键
        for i in range(0, len_Records):
            new_agree_btn = QtWidgets.QPushButton('同意')
            self.agree_list.append(new_agree_btn)
            len_agree = len(self.agree_list)
            self.agree_list[len_agree - 1].clicked.connect(partial(self.agree, int(Records[i][0]), i))
            self.app_table.setCellWidget(i, j, new_agree_btn)
            # 生成拒绝键
            new_refuse_btn = QtWidgets.QPushButton('拒绝')
            self.refuse_list.append(new_refuse_btn)
            self.refuse_list[i + 1].clicked.connect(partial(self.refuse, int(Records[i][0]), i))
            self.app_table.setCellWidget(i, j + 1, new_refuse_btn)
            # 获取当前状态，如果为pending才能同意或拒绝
            state = self.app_table.item(i, 6).text()
            if (state == 'Pending'):
                new_agree_btn.setEnabled(True)
                new_refuse_btn.setEnabled(True)
            else:
                new_agree_btn.setEnabled(False)
                new_refuse_btn.setEnabled(False)

    def agree(self, app_id, current_row):
        self.agree_list[current_row + 1].setEnabled(False)
        self.refuse_list[current_row + 1].setEnabled(False)
        new_state = QTableWidgetItem('Passed')
        new_state.setTextAlignment(Qt.AlignCenter)
        self.app_table.setItem(current_row, 6, new_state)
        self.formCommentapp = QWidget()
        self.uicommentApp = comment.Ui_Form(app_id, 'Agree')
        self.uicommentApp.setupUi(self.formCommentapp)
        self.uicommentApp.Comment_signal.connect(self.showcomment)
        self.formCommentapp.show()

    def showcomment(self, list):
        i = 0
        for i in range(0, self.app_table.rowCount()):
            if(int(self.app_table.item(i, 0).text()) == list[1]):
                break
        new_comment = QTableWidgetItem(list[0])
        self.app_table.setItem(i, 7, new_comment)

    def refuse(self, app_id, current_row):
        self.agree_list[current_row + 1].setEnabled(False)
        self.refuse_list[current_row + 1].setEnabled(False)
        new_state = QTableWidgetItem('Refused')
        new_state.setTextAlignment(Qt.AlignCenter)
        self.app_table.setItem(current_row, 6, new_state)
        self.formCommentapp = QWidget()
        self.uicommentApp = comment.Ui_Form(app_id, 'Refuse')
        self.uicommentApp.setupUi(self.formCommentapp)
        self.uicommentApp.Comment_signal.connect(self.showcomment)
        self.formCommentapp.show()

    # 排序并重新显示新的table
    def sortAndFilter(self):
        sorttype = self.comboBox.currentText()
        filtertype = self.filtercombox.currentText()
        self.app_table.setRowCount(0)
        self.app_table.clearContents()
        appl = application.Manage_Application()
        Records = appl.ReturnTeacSort(sorttype, filtertype, int(self.id))
        i = 0
        j = 0
        len_Records = len(Records)
        # 创建“同意键”和“拒绝键”列表
        self.agree_list = list[1]
        self.agree_list = [0]
        self.refuse_list = list[1]
        self.refuse_list = [0]
        self.app_table.setRowCount(len_Records)
        for i in range(0, len_Records):
            for j in range(0, 8):
                if (j == 0):
                    # 需要将申请序号转化为string类型并居中
                    new_id_item = QTableWidgetItem(str(Records[i][j]))
                    self.app_table.setItem(i, j, new_id_item)
                    new_id_item.setTextAlignment(Qt.AlignCenter)
                elif (j == 1):
                    new_stu_item = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_stu_item)
                    new_stu_item.setTextAlignment(Qt.AlignCenter)
                elif (j == 6):
                    new_item = QTableWidgetItem(Records[i][j].rstrip())
                    self.app_table.setItem(i, j, new_item)
                    new_item.setTextAlignment(Qt.AlignCenter)
                else:
                    new_item = QTableWidgetItem(Records[i][j])
                    self.app_table.setItem(i, j, new_item)
        i = 0
        j = 8
        # 生成同意键
        for i in range(0, len_Records):
            new_agree_btn = QtWidgets.QPushButton('同意')
            new_agree_btn.clicked.connect(partial(self.agree, Records[i][0], i))
            self.agree_list.append(new_agree_btn)
            self.app_table.setCellWidget(i, j, new_agree_btn)
            # 获取当前状态，如果为Pending就可以同意或拒绝
            state = self.app_table.item(i, 6).text()
            if (state == 'Pending'):
                new_agree_btn.setEnabled(True)
            else:
                new_agree_btn.setEnabled(False)
            # 生成拒绝键
            new_refuse_btn = QtWidgets.QPushButton('拒绝')
            self.refuse_list.append(new_refuse_btn)
            self.refuse_list[i + 1].clicked.connect(partial(self.refuse, Records[i][0], i))
            self.app_table.setCellWidget(i, j + 1, new_refuse_btn)
            # 如果是Pending才可以拒绝
            if (state == 'Pending'):
                new_refuse_btn.setEnabled(True)
            else:
                new_refuse_btn.setEnabled(False)
