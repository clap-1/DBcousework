# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StuAddApplication.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import application

class Ui_Form(QObject):
    # 定义一个添加信号
    App_info_signal = pyqtSignal(list)
    # 定义一个修改信号
    App_revise_signal = pyqtSignal(list)
    # 初始化
    def __init__(self, app_id, stu_id, windowtype):
        super(Ui_Form, self).__init__()
        self.app_id = app_id
        self.stu_id = stu_id
        self.windowtype = windowtype

    def setupUi(self, Form):
        self.Form = Form
        Form.setObjectName("Form")
        Form.resize(694, 553)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.titlelabel = QtWidgets.QLabel(Form)
        self.titlelabel.setStyleSheet("font: 75 26pt \"Arial\";\n"
"font: 36pt \"方正粗黑宋简体\";")
        self.titlelabel.setObjectName("titlelabel")
        self.verticalLayout.addWidget(self.titlelabel, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(Form)
        self.label.setStyleSheet("\n"
"font: 10pt \"方正粗黑宋简体\";")
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.leavetime = QtWidgets.QDateTimeEdit(Form)
        self.leavetime.setStyleSheet("font: 75 12pt \"Arial\";")
        self.leavetime.setObjectName("leavetime")
        self.horizontalLayout.addWidget(self.leavetime)
        self.leavetime.setDateTime(QDateTime.currentDateTime())
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setStyleSheet("font: 10pt \"方正粗黑宋简体\";")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4, 0, QtCore.Qt.AlignHCenter)
        self.returntime = QtWidgets.QDateTimeEdit(Form)
        self.returntime.setStyleSheet("font: 75 12pt \"Arial\";")
        self.returntime.setObjectName("returntime")
        self.horizontalLayout_4.addWidget(self.returntime)
        self.returntime.setDateTime(QDateTime.currentDateTime())
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setStyleSheet("font: 10pt \"方正粗黑宋简体\";")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_5.addWidget(self.label_6)
        self.reason = QtWidgets.QTextEdit(Form)
        self.reason.setObjectName("reason")
        self.horizontalLayout_5.addWidget(self.reason)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.submit_btn = QtWidgets.QPushButton(Form)
        self.submit_btn.setStyleSheet("font: 10pt \"方正粗黑宋简体\";")
        self.submit_btn.setObjectName("submit_btn")
        self.verticalLayout.addWidget(self.submit_btn)
        self.horizontalLayout_7.addLayout(self.verticalLayout)

        #信号与槽连接,判断是添加还是修改
        if (self.windowtype == 'Add'):
            self.submit_btn.clicked.connect(self.submit)
        else:
            self.submit_btn.clicked.connect(self.revise)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.titlelabel.setText(_translate("Form", "离校申请"))
        self.label.setText(_translate("Form", "离校时间"))
        self.label_4.setText(_translate("Form", "返校时间"))
        self.label_6.setText(_translate("Form", "外出理由"))
        self.submit_btn.setText(_translate("Form", "提交"))

    #提交后返回时间给申请界面
    def submit(self):
        Application_id = int(self.app_id)
        comment_id = Application_id
        overlap = QWidget()
        appl = application.Manage_Application()
        timeout = QWidget()
        reason_empty = QWidget()
        leave = self.leavetime.dateTime()
        leave_str = leave.toString("yyyy-MM-dd hh:mm:ss")
        leave_s = leave.toTime_t()
        returns = self.returntime.dateTime()
        returns_str = returns.toString("yyyy-MM-dd hh:mm:ss")
        returns_s = returns.toTime_t()
        current_time = QDateTime.currentDateTime()
        current_time_str = current_time.toString("yyyy-MM-dd hh:mm:ss")
        current_time_s = current_time.toTime_t()
        reason = self.reason.toPlainText()
        comment_text = "无"
        reason = self.reason.toPlainText()
        # 外出时间
        diff = leave.secsTo(returns) / 3600
        # 检查出校时间是否在当前节点后以及检查输入返校日期是否在离校日期之后
        if ((leave_s - current_time_s) < 0):
            QMessageBox.information(timeout, "提示","离校日期应该选择在当前时间之后")
        elif ((returns_s - leave_s) < 0):
            QMessageBox.information(timeout, "提示", "离校日期选择应该在返校日期之前")
        elif (diff > 48):
            QMessageBox.information(timeout, "提示","外出时间超出48小时")
        elif (reason == ''):
            QMessageBox.information(reason_empty, '提示','外出理由不能为空')
        elif (appl.CheckLeaveCount(Application_id, leave_str, returns_str, int(self.stu_id)) >= 3):
            QMessageBox.information(timeout, "提示","离校当周离校次数已经超过3次，不能离校")
        else:
            if(appl.CheckTimeOverlap(Application_id, int(self.stu_id), leave_str, returns_str) == 0):
                Teac_id = appl.FindTeacResForStu(int(self.stu_id))
                Teac_name = appl.FindTeacNameForStu(int(self.stu_id))
                appl.Add_Application(Application_id, int(self.stu_id), Teac_id, current_time_str, leave_str,
                                     returns_str, reason, 'Pending', comment_id)
                appl.Add_comment(comment_id, Teac_id, Application_id, comment_text)
                self.submit_btn.setEnabled(False)
                self.App_info_signal.emit([current_time_str,leave_str, returns_str, reason, Teac_name])
                self.Form.hide()
            else:
                QMessageBox.information(overlap, "提示", "选择时间段与已存在申请时间段重叠")

    #修改并更新界面
    def revise(self):
        Application_id = int(self.app_id)
        comment_id = Application_id
        overlap = QWidget()
        appl = application.Manage_Application()
        timeout = QWidget()
        reason_empty = QWidget()
        leave = self.leavetime.dateTime()
        leave_str = leave.toString("yyyy-MM-dd hh:mm:ss")
        leave_s = leave.toTime_t()
        returns = self.returntime.dateTime()
        returns_str = returns.toString("yyyy-MM-dd hh:mm:ss")
        returns_s = returns.toTime_t()
        current_time = QDateTime.currentDateTime()
        current_time_str = current_time.toString("yyyy-MM-dd hh:mm:ss")
        current_time_s = current_time.toTime_t()
        reason = self.reason.toPlainText()
        comment_text = "无"
        reason = self.reason.toPlainText()
        # 外出时间
        diff = leave.secsTo(returns) / 3600
        # 检查出校时间是否在当前节点后以及检查输入返校日期是否在离校日期之后
        if ((leave_s - current_time_s) < 0):
            QMessageBox.information(timeout, "提示", "离校日期应该选择在当前时间之后")
        elif ((returns_s - leave_s) < 0):
            QMessageBox.information(timeout, "提示", "离校日期选择应该在返校日期之前")
        elif (diff > 48):
            QMessageBox.information(timeout, "提示", "外出时间超出48小时")
        elif (reason == ''):
            QMessageBox.information(reason_empty, '提示', '外出理由不能为空')
        elif (appl.CheckLeaveCount(Application_id, leave_str, returns_str, int(self.stu_id)) >= 3):
            QMessageBox.information(timeout, "提示", "离校当周离校次数已经超过3次，不能离校")
        else:
            if (appl.CheckTimeOverlap(Application_id, int(self.stu_id), leave_str, returns_str) == 0):
                appl.ReviseAppl(Application_id, current_time_str, leave_str, returns_str, reason, 'Pending', '无')
                self.submit_btn.setEnabled(False)
                self.App_revise_signal.emit([Application_id, current_time_str, leave_str, returns_str, reason])
                self.Form.hide()
            else:
                QMessageBox.information(overlap, "提示", "选择时间段与已存在申请时间段重叠")

